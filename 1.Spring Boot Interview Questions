# WHAT IS SPRING BOOT & COMPARE TO SPRING, WHAT ARE THE PROBLEMS SOLVED IN SPRING BOOT
-Spring is very popular framework for developing web & enterprice application, the features of spring framework are
1. Dependency injection
2. Spring MVC (Model and View Controller)
3. Spring Security
4. Spring Data JPA
5. Spring Security
6. Spring AOP
-If we use spring framework, developer need to handle few things like
1. In spring framework need to handle lot of configurations
2. If we use spring MVC, handle component scan, dispatcher servlet, view resolver
3. If we use JPA/Hibernate, handle data source, entity management factory/session factory and transaction management
4. If we use cache should be handle cache configuration 
- Comapre to spring, spring boot provide production ready spring-based application without writing any defult configurations
1. Spring boot provide starter dependencies
2. Spring boot provide auto configurations
3. Spring boot provide inbuild embedded server
4. Spring boot provide actuator

# WHY WE GO FOR SPRING BOOT FROM SPRING
- In Spring, developer only will configure maven dependecies in POM.xml 
- Developer need to know the suitable maven devependecy versions
- While developing stage we will run application on local server, bcoz spring does't have embedded server
- Spring doesn't have production ready support
- Spring doesn't have CLI 

# WHAT IS SPRING BOOT
- Spring boot is framework,It is provide number of features for creating stand-alone, and production ready application
1. Auto-configuration
- In spring frame work, developer only handle the all confguration using xml configuration file, like datasource configuration, auto wiring etc...
- But in spring boot developer no need to handle defult configurations. spring boot automatically configure many of the spring features
Ex: If we use spring-boot-starter-data-jpa dependency, spring boot will automatically configure a datasource, and entity mangement factor and other beans related to JPA. You dont need to write a lot of boilerplate code.
2.Starter dependency
- Spring boot provides starter dependencies that make it easy to add commmon features to our application, such as web development, data access and messaging
- Spring boot will provide opinionated dependencies which means spring boot will dowload the suitable version dependecies what we added in pom.xml
3.Embedded servers
-Spring boot provides embedded servers, such as Tomcat and Jetty, so you don't need to configure a seperate web server
-In developement, developer no need to compile and build application in server for every change, dev tool will handle
4. Metrics and health checks
- Spring boot provides matrics and health checks that you can use to monitor your application

# WHAT ARE THE KEY FEATURES IN SPRING BOOT. SPRING BOOT PROVIDE STARTER DEPENDENCIES
1. In spring framework need to handle lot of configurations
- The use of starter dependencies like if we add spring-boot-starter-web internally spring boot will pull the all required dependencies like spring mvc, jackson json validation api, tomcat server  
2. Spring boot provide auto configurations
- Spring boot will provide auto configuration like automatically configure based on what you added starter dependencies in pom.xml
Ex: If you added sprinbg-boot-starte-jpa, internally spring boot will configure data source confguration, entity management, transaction management
3. Spring boot provide inbuild embedded server
4. Spring boot provide actuator
- Using actuator in spring boot we can handle few thing like 
  - View the application bean configuration details
  - View the application URL mappings
  - View envronment details
  - View configuration parameter value
  - View the registered health check metrics

# WHAT IS SPRING BOOT STARTER DEPENDENCIES AND WHAT ARE THE IMPORTANT SPRING BOOT STARTER DEPENDENCIES
- In spring application, developer should add required maven dependencies in pom.xml with depency version, so some time those version will not comfortable for spring application. so over come this problem sping boot provide starter dependecies
- Spring boot provide starter dependecies, using this dependencies we can create spring boot application quickly
- Most common starter dependencies are like
1. spring-boot-starter-web
2. spring-boot-starter-data-jpa
3. spring-boot-starter-security
4. spring-boot-starter-test
5. spring-boot-starter-dev

# WHAT IS SPRING BOOT STARTER PARENT
- spring-boot-starter-parent is provide defult configuration like provide defualt java version and maven plugins and handle defult versions for maven dependencies

# WHAT ARE THE TYPE OF APPLICATIONS IN SPRING BOOT
- spring-boot-starter
  If we use spring-boot-starter dependency in class path then the spring boot application comes under defualt category
- sprinbg-boot-starte-web
  If we use sprinbg-boot-starte-web dependency in class path then the spring boot application comes under servlet category
- sprinbg-boot-starte-webflux
  If wer user sprinbg-boot-starte-webflux dependency in class path then the spring boot application comes under reactive category
  
# HOW DO YOU CONFIGURE DATABASE CONNECTION IN SPRING BOOT APPLICATION
- We have two approches for doing database connection
1. By using application.properties file : This is very most common way to configure database connection, We can specify database connection properties, spring boot will automatically configure the database connection
Ex:
Database Configuration:
spring.datasource.url=jdbc:mysql://localhost:3306/online_shopping
spring.datasource.username=root
spring.datasource.password=Sharath@456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

JPA and Hibernate Configuration:
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true

2. By using @Configuration class : This is adavanced way to configure data base connection. We can specify database connection properties, spring boot will automatically configure the database connection
Ex: 
@Configuration
public class DatabaseConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/online_shopping");
        dataSource.setUsername("root");
        dataSource.setPassword("Sharath@456");

        return dataSource;
    }
Note : DataSource Bean: The dataSource() method creates and configures a DriverManagerDataSource with the necessary details like the JDBC URL, username, password, and the MySQL driver class.

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource());
        em.setPackagesToScan(new String[] { "com.yourpackage.model" }); // Update with your package

        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        em.setJpaVendorAdapter(vendorAdapter);
        em.setJpaProperties(hibernateProperties());

        return em;
    }
Note : entityManagerFactory Bean: The entityManagerFactory() method configures the EntityManagerFactory which is required by JPA. It uses LocalContainerEntityManagerFactoryBean to set up the data source and scan the package where your entity classes are located.

    @Bean
    public PlatformTransactionManager transactionManager() {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());
        return transactionManager;
    }
Note : TransactionManager Bean: The transactionManager() method sets up the transaction management for your application using JpaTransactionManager.

    private Properties hibernateProperties() {
        Properties properties = new Properties();
        properties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
        properties.put("hibernate.show_sql", "true");
        properties.put("hibernate.format_sql", "true");
        properties.put("hibernate.hbm2ddl.auto", "update"); // For development, change as per requirement
        return properties;
    }
Note: Hibernate Properties: The hibernateProperties() method sets up some additional Hibernate properties, such as the dialect, SQL formatting, and the behavior of the schema generation (hbm2ddl.auto).
}

# HOW SPRING BOOT INTERNALLY WORKS OR EXPLAIN RUN() METHOD IN SPRING BOOT
-The process of execution spiing boot application while calling main()
1. Spring boot application execution will start from main()
2. The main() internally call run()
3. run() will perform bootstraping for out spring boot application (perform all configurations)
4. Start stopWatch to identify the taking time for bootstraping in spring boot application
5. Prepare environment to run our spring boot (dev, prod, qa, uat)
6. Start IOC container (IOC container will manage life cycle of beans)

# WHAT IS DIFFERENT WAY TO CREATE SPRING BOOT APPLICATION
- We have three approches for creating spring boot application, there are 
1. Using spring initializer
2. Using spring starter project in STS
3. Using Spring Boot CLI

# WHAT IS USE OF @SPRINGBOOTAPPLICATION ANNOTATION
-@SpringBootApplication annotations is a key annotation for spring boot application, we are using this annotation in the main class of application
-@SpringBootApplication internally calls three types of annotations, there are 1. @EnableAutoConfiguration 2.@ComponentScan and 3.@Configuration
1. @EnableAutoConfiguration : This annotation enabled auto configuration in spring boot application, which means creating beans automatically by scanning classpath
2. @ComponentScan : This annotation scan the current package and sub-packages and configure the beans by identifying annotations
3. @Configuration : This annotation is used to tell the this class as configuration class using @Configuration annotation on top of the class

# DIFFERENTS BETWWEEN @SPRINGBOOTANNOTATION, @CONFIGURATION AND @COMPONETSCAN ANNOTATIONS
- @SpringBootApplication is an annotation, we can use this annotation on entry class of spring boot application
- @SpringBootApplication annotation internally call three annotations like @SpringBootConfiguration, @EnableAutoConfiguration and @ComponetScan annotation
- @SpringBootConfiguration internally call @Configuration annotations, the use of this annotation is to tell the this class is configuration class for IOC container
- @EnableAutoConfiguration annotation is used to enable the auto configuration which means spring boot will manage the configurations depence on which starterd dependecies we added in pom.xml
- @ComponentScan annotation used to scan the root package and sub packages for managing auto wiring (Manage life cycle of beans)


# WHAT IS USE OF @CONFIGURATION ANNOTAIONS


#WHAT IS SPRING BOOT AUTO CONFIGURATION
- Spring boot will provide auto configuration like automatically configure based on what you added starter dependencies in pom.xml
Ex: If you added sprinbg-boot-starte-jpa, internally spring boot will configure data source confguration, entity management, transaction management

# HOW TO IMPLEMENT CACHE IN SPRING BOOT
- To implement cache in spring boot application, we have to add maven dependency called spring-boot-starter-cache
- And add @EnableCaching annotaion in top of the main class
- This is provide defualt cache. if we want to implement custom cache, not required above configuration. we have to create cacheManager() bean
Ex: @Configuration
    public class CachConfig{
    public CachManager cachManager(){
    //Define catch manager
    }
    }

- Then add caching annotaion on our method method, the annotations are @Cacheble, @Cacheput and @CatchEvict
EX: @Service
    Public class YourService{
    @Cacheable("yourCacheName")
    public String getCacheData(String key){
    //This method will cached based on the cache name and key parameter
    //Return the data to be cached
    }
    }	

# WHAT IS USE OF @AUTOWIRED ANNOTAION
- This is stereo type annotation, this annotation is used to inject the required dependecies(beans) at runtime time

# HOW TO HANDLE EXCEPTIONS IN SPRING BOOT
- We can handle exception in various ways like
  Global Exception : We can write global exceptions using @ConrolAdvice and @ExceptionHandler
- @ControlAdvice is class level annotation and @ExceptionHandler is method level annotation, method will return specific exception
  Custom Exception : We can create custome exception by extending RuntimeException or Exception Class
  Using try catch blocl also we can handle exception

# WHAT ARE THE TYPES OF EMBEDDED SERVERS IN SPRING BOOT & HOW TO CHANGE DEFUALT SERVER PORT
- In spring boot defualt embedded server is tomcat server, and also support Jetty and Undertow servers
- If we want to change defualt embedded server in spring boot application, we have to exclude tomcat dependency and add other servers like jetty or undertow server dependency
Ex: <dependencies>
    <dependency>
    <groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	<exclusions>
	<exclusion>
	<groupId>org.framework.group</groupId>
	<artifactId>spring-boot-starter-tomcat</artifactId>
	</exclusion>
	</exclusions>
    <dependency>
	<dependecy>
	<groupId>org.framework.boot</groupId>
	<artifactId>spring-boot-starter-jetty</artifactId>
	</dependecy>
    </dependencies>
 - The defualt port for server is 8080, we can change defualt port using server.port propeties in application.xml file
 
# HOW TO RUN SPRING BOOT APPLICATION FROM COMMAND LINE
 - We have two options for running  spring boot application
 1. Using java -jar command
 2. Using spring boot maven plugin
    - mvn  spring-boot:run
	
Ex: 1.Using java -jar command
- D://Spring-boot-Workspace/Spring-Boot-Demo-App>mvnw package 
- D://Spring-boot-Workspace/Spring-Boot-Demo-App/targer>dir //we can find jar file name
- D://Spring-boot-Workspace/Spring-Boot-Demo-App/targer>java -jar jar-file-name
    2.Using spring boot maven plugin
- D://Spring-boot-Workspace/Spring-Boot-Demo-App>mvnw spring-boot:run

# DESCRIBE THE FLOW OF REST API HTTP REQUEST THROUGH THE SPRING BOOT APPLICATION

# EXPLAIN SPRING BOOT MVC ARCHITECTURE

# CHANGE EMBEDDED SERVER PORT IN SPRING BOOT
- We can change port using application.properties file like server.port=8081 (8080 is defulat port)

# OVERRIDE EMBEDDED SERVER IN SPRING BOOT
- Yes, wemcan over ride defualt embedded server by adding required serer spring boot started depndecy like spring-boot-starter-jetty 

# Disable defual web server in spring boot
- Yes, using spring.main.web-application-type=none in application.properties

# Disable auto-configuration for specific class
- Yes, we can disable auto-configuration for specific class using @EnableAutoConfiguration(exclude={className})



# HOW TO IMPLEMENT CACHE IN SPRING BOOT
- To implement cache in spring boot application, we have to add maven dependency called spring-boot-starter-cache
- And add @EnableCaching annotaion in top of the main class
- This is provide defualt cache. if we want to implement custom cache, not required above configuration. we have to create cacheManager() bean
Ex: @Configuration
    public class CachConfig{
    public CachManager cachManager(){
    //Define catch manager
    }
    }

- Then add caching annotaion on our method method, the annotations are @Cacheble, @Cacheput and @CatchEvict
EX: @Service
    Public class YourService{
    @Cacheable("yourCacheName")
    public String getCacheData(String key){
    //This method will cached based on the cache name and key parameter
    //Return the data to be cached
    }
    }

# HOW TO CREATE WAR FILE FOR SPRING BOOT APPLICATION FOR DEPLOYING EXTERNAL SERVER
- By defualt spring boot application is packaged as JAR file, so change to war file in pom.xml
- Add spring-boot-starter-tomcat dependency in provider scop
- Extend SpringBootServletInitializer for main class 
Ex: @SpringBootApplication
    public class SpringBootDemo extends SpringBootServletInitializer {
    public static void main(String[] args) {
        SpringApplication.run(YourApplication.class, args);
    }
	}
- Run mvn clean package command, then generate the war file in target folder

# WHAT IS SPRING BOOT DEVTOOL
- DevTool is started dependency. In developing we are not required to buuld and deploy application in server for every change. devtool will build and deploy the server in embedded server for every changes

# HOW TO ADD SECURITY IN SPRING BOOT AND EXPLAIN SECURITY AUTO CONFIGURATION
- spring-boot-starter-security is provide security for spring boot application
- If we add spring-boot-starter-security starter dependencym spring boot application will perform defulat form level authentication
- We can add proeprties like spring.security.user.name=sharath, spring.security.user.password=password then we can perform defualt authentication in spring boot application

# WHAT IS USE OF SPRING DATA REST
- We can use spring data REST by extending JPA Repository, JPA Respository provide predifined curd methods for performing CURD operations using entity class
- We can remove lost of boilerplate code in spring boot project using Spring JPA Repository

# HOW WE USE PROFILES IN SPRING BOOT APPLICATION
- We can use multiple propeties files for maintaining different types of environment in spring boot application
- We can create propeties file like application-dev.propeties / application-prod.properties / application-qa.properties
- We should active any one of propety file in main application.properties file using spring.profiles.active = dev

# HOW TO IMPLEMENT ASYNCHRONOUS PROCESSING IN SPRING BOOT

# HOW TO HANDLE CROSS-ORIGIN RESOURCE SHARING IN SPRING BOOT

# HOW CAN WE SCHEDULE TASK OR JOB IN SPRING BOOT APPLICATION

# DIFFERENT BETWEEN @TRANSACTION AND @ENABLETRANSACTIONMANAGEMENT ANNOTATION IN SPRING BOOT

# HOW CAN WE OVERRIDE DEFUALT ERROR HANDLER IN SPRING BOOT

# HOW TO HANDLE LONG-RUNNING TASK IN SPRING BOOT WITHOUT BLOCKING THE MAIN THREAD

# WHAT IS SPRING BOOT’S ROLE IN MICROSERVICES (We have to watch video)
- Spring boot will play crucial role for building microservices architecture
- Spring boot provide embedded server, so we can run every micro services in embeded servers independently
- Every microservices can maintain different environment, so spring booot provide profiles so we can manager different environment using external configuration files line application.properties file
- We can implement OAuth2 and JWT security using spring boot so every microservice is like very secured 
- Spring Boot makes it easier to develop and deploy microservices by providing embedded servers and simplifying configuration with properties. Additionally, it integrates well with Spring Cloud for service discovery, load balancing, and distributed configuration.

# HOW DO YOU INTEGRATE KAFKA WITH SPRING BOOT
- To integrate Kafka with Spring Boot, you can use the spring-kafka dependency. Then, configure Kafka properties in application.properties and use @KafkaListener to listen to Kafka topics

# WHAT ARE THE STEPS IN THE SPRING BEAN LIFE CYCLE
- The spring bean life cycle are
1. Instantiation: Creating the bean instance.
2. Population: Injecting dependencies.
3. Initialization: Calling @PostConstruct methods and custom init methods.
4. Ready for Use: The bean is now ready to be used.
5. Destruction: Calling @PreDestroy methods and custom destroy methods before the bean is removed from the container.

# WHAT IS THE @RESTCONTROLLER ANNOTATION USED IN SPRING BOOT
- @RestController annotations is combination of @Controller and @ResponceBody annotations
- @RestController annotations is used to make RESTfull web services using spring MVC, also eliminate to add @ResponseBody in every method

# How do you configure logging in a Spring Boot application
- We can configure logging configuration in application.xml file like we can specify logging level, appenders and log formats

# HOW DOES SPRING BOOT SUPPORT EXTERNALIZED CONFIGURATION
- Spring Boot supports externalized configuration by allowing you to define application properties outside of your code.

# WHAT IS A SPRING BOOT ACTUATOR
- Actuator is provide production ready features to help you monitor and manage application. It include built-in endpoints for metrics, health check and other usefull information
- Spring Boot Actuator is a sub-project of the Spring Boot Framework. It includes a number of additional features that help us to monitor and manage the Spring Boot application. 
- If we want to get production-ready features in an application, we should use the Spring Boot actuator.
- We can enable actuator by injecting the dependency spring-boot-starter-actuator in the pom.xml file.
  <dependency>  
  <groupId>org.springframework.boot</groupId>  
  <artifactId>spring-boot-starter-actuator</artifactId>  
  <version>2.2.2.RELEASE</version>  
  </dependency> 

# SPRING BOOT STARTER TEST
- The spring-boot-starter-test is the primary dependency for the test. It contains the majority of elements required for our tests.
- There are several different types of tests that we can write to help test and automate the health of an application. 
  Before starting any testing, we need to integrate the testing framework.
- With Spring Boot, we need to add starter to our project, for testing we only need to add the spring-boot-starter-test dependency.
  <dependency>  
  <groupId>org.springframework.boot</groupId>  
  <artifactId>spring-boot-starter-test</artifactId>  
  <version>2.2.2.RELEASE</version>  
  <scope>test</scope>  
  </dependency>  

# SPRING BOOT DEVTOOLS
- DevTools stands for Developer Tool. The aim of the module is to try and improve the development time while working with the Spring Boot application. 
  Spring Boot DevTools pick up the changes and restart the application.
- We can implement the DevTools in our project by adding the following dependency in the pom.xml file.
  <dependency>  
  <groupId>org.springframework.boot</groupId>  
  <artifactId>spring-boot-devtools</artifactId>  
  <scope>runtime<scope >  
  </dependency>  
-Spring Boot DevTools provides the following features:
1. Property Defaults
2. Automatic Restart
3. LiveReload
4. Remote Debug Tunneling
5. Remote Update and Restart

# WHAT IS PROFILES IN SPRING BOOT
-We can defined profiles using appplication.properties file or application.yml file using spring.profiles.active.property = dev, qa
-We can manage the application environment by using profiles configuration

# HOW TO IMPLEMENT ASYNCHRONOUS PROCESSING IN SPRING BOOT

# HOW TO HANDLE CROSS-ORIGIN RESOURCE SHARING IN SPRING BOOT

# HOW CAN WE SCHEDULE TASK OR JOB IN SPRING BOOT APPLICATION

# DIFFERENT BETWEEN @TRANSACTION AND @ENABLETRANSACTIONMANAGEMENT ANNOTATION IN SPRING BOOT

# HOW CAN WE OVERRIDE DEFUALT ERROR HANDLER IN SPRING BOOT

# HOW TO HANDLE LONG-RUNNING TASK IN SPRING BOOT WITHOUT BLOCKING THE MAIN THREAD

# HOW TO BECOME MAVEN PROJECT AS SPRING BOOT APPLICATION
1. First need to add spring-boot-started-parent dependency in pom.xml, it is used to declare that our project is a child to this parent project.
   spring-boot-starter-parent is a project starter. Its provide defualt configuration for our project
   spring-boot-starter-parent is controll the dependency management to avoid conflict
   We only need to specify the Spring Boot version number, so based on sb specified number starter will download recomended version jar files
Ex: <dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-parent</artifactId>  
    <version>2.2.1.RELEASE</version>  
    <type>pom</type>  
    </dependency>  
- If we want to develop any web application then we use spring-boot-starter-web maven dependency, used to pulls in all dependencies related to web development
Ex: <dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-web</artifactId>  
    <version>2.2.1.RELEASE</version>  
    </dependency>

- TOMCAT IS DEFULAT WEB SERVER IN SPRING BOOT, IF WE NEED TO CHANGE DEFUALT TOMCAT SERVER WE MUST BE EXCLUDE FROM SPRING-BOOT-STARTER-WEB
Ex: <dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-web</artifactId>  
    <exclusions>  
    <exclusion>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-tomcat</artifactId>  
    </exclusion>  
    </exclusions>  
    </dependency>  
    <dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-jetty</artifactId>  
    </dependency>  And We can also customize the behavior of the Jetty server by using the application.properties file.
	
# ANNOTATIONS IN SPRING BOOT
1. @Configuration
- This annotaion is used to indicate the bean initialization from here for spring container at run time
2. @ComponentScane(basePackage="")
- Used to scan complete bean class for initiliazinig objects for beans
3. @EnableAutoConfiguration
- Used to start autowiring automatically
- We can use @Qualifier annotation to give custom  bean names
4. @SpringBootApplication: It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.
- Used to scan bean packages and start to initilaize beans using dependency injection and perform autowiring  
5. @RestController
- It can be considered as a combination of @Controller and @ResponseBody annotations. The @RestController annotation is itself annotated with the @ResponseBody annotation. It eliminates the need for annotating each method with @ResponseBody.
6. @GetMapping 
- It maps the HTTP GET requests on the specific handler method
- It is used instead of using: @RequestMapping(method = RequestMethod.GET)
7. @PostMapping
- It maps the HTTP POST requests on the specific handler method
- It is used instead of using: @RequestMapping(method = RequestMethod.POST)
8. @PutMapping
- It maps the HTTP PUT requests on the specific handler method
- It is used instead of using: @RequestMapping(method = RequestMethod.PUT)
9. @DeleteMapping
- It maps the HTTP DELETE requests on the specific handler method
- It is used instead of using: @RequestMapping(method = RequestMethod.DELETE)
10. @PatchMapping
- It maps the HTTP PATCH requests on the specific handler method
- It is used instead of using: @RequestMapping(method = RequestMethod.PATCH)
11. @RequestBody
- It is used to bind HTTP request with an object in a method parameter. Internally it uses HTTP MessageConverters to convert the body of the request.
  When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.
12. @RequestBody
- It is used to bind HTTP request with an object in a method parameter. Internally it uses HTTP MessageConverters to convert the body of the request.
  When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.
13. @PathVariable
- It is used to extract the values from the URI. It is most suitable for the RESTful web service, where the URL contains a path variable. We can define multiple @PathVariable in a method.
14. @RequestParam
- It is used to extract the query parameters form the URL. It is also known as a query parameter. It is most suitable for web applications. It can specify default values if the query parameter is not present in the URL.
15. @RequestHeader
- It is used to get the details about the HTTP request headers. We use this annotation as a method parameter. The optional elements of the annotation are name,
  required, value, defaultValue. For each detail in the header, we should specify separate annotations. We can use it multiple time in a method
16. @RequestAttribute
- It binds a method parameter to request attribute. It provides convenient access to the request attributes from a controller method. With the help of @RequestAttribute annotation, we can access objects that are populated on the server-side.
and stereo type annotations like @Component, @Service, @Repository

# SPRING BOOT APPLICATION PROPERTIES
- Spring Boot Framework comes with a built-in mechanism for application configuration using a file called application.properties. It is located inside the src/main/resources folder
- There are sixteen categories of Spring Boot Property are as follows:
1. Core Properties
2. Cache Properties
3. Mail Properties
4. JSON Properties
5. Data Properties
6. Transaction Properties
7. Data Migration Properties
8. Integration Properties
9. Web Properties
10. Templating Properties
11. Server Properties
12. Security Properties
13. RSocket Properties
14. Actuator Properties
15. DevTools Properties
16. Testing Properties

# POINTS
- In spring or spring boot, container will only initiaze object for bean class, perform dependency injection using autowiring concept and manange life cycle of bean class
- So developer need to tell for container which class is required to intialize object using @Component annotation
- @Component annotaion is class level annotations, used to intinalize oject for bean class
- Container will follow singleton design pattern to initialize objects for beans, means return same object for every initialization
Note: we can change bean scope type using @Scope annotaion
- In spring or spring boot defualt scopt type is singleton, in singleton object will create at time of container will start, and retune same
  object for all request.
- If we make scope type is prototype like (@Scop(value="prototype")), then return different objects for every request. and the object will
  initialize at time of request will come. but not in container stating time
Ex: @Component
    @Scope(value="singleton")// defualt type
    @Scope(value="prototy[e")// custom type
    public class UserInfo{
    privat String uId;
    private String uName;
    private Stinng uAdd;
    //settters and getters
    }

Ex: @Component
    public class Car{
    private String cId;
    private String cName;
    @Autowired
    //@Quanlifier("engine")
    @Quanlifier("eng")
    private Engine engine;
    setters and getters
    }
    //@Component
    @Component("eng")
    public class Engine{
    private String eId;
    private String eType;
    private String eDesc;
    setters and getters
    }
