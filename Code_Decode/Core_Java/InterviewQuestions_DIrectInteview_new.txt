
----- Capgemini ------ [https://www.youtube.com/watch?v=Y5o9aUR8ujY]
# Different between String Builder & String Buffer
- Both are used to do String related operations
- StringBuilder is synchronous which means it can allow only one thread at time. when we work on single thread environment then use it
- String Buffer is asynchronous which means it can allow multiple threads at time, when we work on multiple thread environment the we use it

# Different between Array List & LinkedList
- This two classes are we implemented by List interface
- Array List is follow dynamic array, LinkedList follow double linked list
- Array List I used to frequently doing search operations, And LinkedList I used to doing insert, update and delete operations, because in linked list while adding elements internally create link            for new element but its not shifting into elements for next index

# Explain purpose of finalized() and Is it recommended to use it *
- Finalized() is called by garbage collector when the object is read to destroy. And It is not recommended to use finalize() method, and it is deprecated in Java 9

# Different between Comparable & Comparator, When we use comparable & Comparator
- Comparable and comparator both are interface, its used to ordering of sorting the elements
- If I want to do default natural sorting order, like i have list of number or list of string want to apply sorting for that, at the time i will use comparable interface
- If I want to do custom sorting order then use Comparator interface
  Ex: I have Employee class in the might have some fields like name, in that i want to get data by employee name for that i will custom sorting using Comparator with ComparareTo()

# What is exceptions
- Exceptions is like code will not execute abnormally, we have two types of exceptions like checked & un-checked exceptions
- Checked exceptions will check by compiler at compiler time, but un-checked exceptions will not check compiler, un-checked exceptions will come at run time
- For example SQL Exceptions, IO Exceptions are checked exceptions, Null pointer Exceptions, Array Index Out Of Bounds Exceptions are un-checked exceptions

# How to handle validations in spring boot application
- For example we have employee entity, it might have some fields like employeeId, employeeName, employeeEmail. so this employeeId is not null field so for that I used spring boot annotations like @NotNull annotations
- In Controller layer, I used @Validator annotation along with Request body of that employee, is validator annotation will check whether the employee id is null or not. if null return employee id can't be null

# Status codes in spring boot https
- Status codes are indicate about our HTTP API status, for example
1. 200 OK: The request was successful.
2. 301 Moved Permanently: The requested resource has been permanently moved to a new location
3. 400 Bad Request: The request was invalid
4. 401 Unauthorized: The client needs to authenticate to access the resource
5. 403 Forbidden: The client does not have permission to access the resource
6. 404 Not Found: The requested resource could not be found
7. 500 Internal Server Error: The server encountered an unexpected error
8. 503 Service Unavailable: The server is temporarily unavailable 

# What is spring boot profiles & How we can use ?
- Profiles is like tell the which type of environment we want to used for spring boot application like dev, test, prod
- We can configure separate profile for separate environment(like application-dev/application-test/application-prod), and we can switch those profiles in application.properties file using        spring.profiles.active=dev/test/prod

# What is spring boot actuator
- Actuator is used to check health of spring boot application like get the beans which are used in application	or we can get no of request which are coming for particular API

# How we can configure custom health indicator in spring boot application *
- We have interface called HealthIndicator, so first i will create one class and implement HealthIndicator interface and override the health() 

# What is API Gate way
- API gate way is act as entry point for client request, whenever the client request will come then it will go through the API gate to backed services
- Primary responsibility is like routing the request which are coming for the client, and we can use authentication and authorization as well

# What do you use for API gate way
- We used Spring Cloud gate way as API date way dependency

# Different between authentication & authorization
- Authentication is used to identify user and authorization is comes after
- Once use will authenticated then will check what are the permission are associated with that user that is basically authorization

# What is transaction & How to handle distributed transaction in microservices*
- 
- Distributed transaction will basically happen between two services, let us consider we are passing data from one service to another service using kafka. so while publish the message to    the kafka remaining services will find the messages from kafka 

# public static void main(String[] args){
   List<String> list = Arrays.asList("apple", "bat", "cat", "banana", "dog");
   Map<String, Long> strLenMap =  list.stream().collect(Collector.groupBy(String::length, Collector.couting()));
   System.out.println(strLenMap);
   O/p : {3=3, 5=1, =1}

# Write SQL Query to find Top 3 employee salary
  SELECT DISTRICT SALARY FROM EMPLOYEES ORDER BY SALARY DESC LIMIT 3;

# Real time Scenario like, In application have memory leakage issue, that is happening in production serve. so on which places you trying to investigation issue*
- 
-------- TCS ----------- [https://www.youtube.com/watch?v=yVj2EgwZxk4]
# How many ways to create thread & which is recommended way to create thread
- We can create thread in 3 ways
  1. By extend Thread class and override run()
  2. By implement RunnableInterface
  3. By using Executor framework
- Recommended way is if we want to create multiple thread then we can use Executor framework, and if want to create single thread and our class is not extend anything then use Thread class or use RunnableInterface

# What is dead lock in threads
- Which means two or more threads are waiting each other for resources, like thread1 is holding resource1, but thread2 is waiting for resource2 but that is holding in another thread is called dead lock
- We can avoid this, like we should follow lock is consistent order, etc*

# What are the stages in threads
- When we create new thread that thread stage is new stage
- wheneven that thread is ready to execute that stage is ready state
- whenever that thread is waiting for other functions that is called waiting stage
- then entered into terminated stage 

# Is possible to restart terminated state thread
- If we try to restart terminated state thread that also called new thread only

# What is throw and throws keyword
- This two are used to handle the exception
- If we want to throw the exception explicitly then we have to use throw key word in try block ( For example I am trying to get Employee data, but there is no Employee class. so explicitly am throwing Employee class not found exception)
- And throws is method signature keyword, which is used to tell method may throws exception

# What are the different types of exceptions in java
- We have two types of exceptions like checked exceptions and unchecked exceptions
- checked exceptions are checked by compiler at compile time
- unchecked exceptions are not checked by compiler, at run time will check unchecked exceptions. like Null pointer exception, Array Index Out Of Bound Exception 

# What is try with resource in exceptions *

# What is equals operator(==) & equals method
- equals operator is used to compare object reference
- equals() is used to compare object content like
Ex: String str1 = "ABC";
    String str2 = new String("ABC");
    System.out.println(str1 === str2) // output : false
    System.out.println(str1.equals(str2)) // output : true

# Different between abstract class and interface & when to go for which one
- Abstract class can have abstract methods as well as non abstract methods, but in interface can have only abstract methods. but from java8 added default and static methods in interface
- Class can extend only one class only, but class can implement multiple interfaces

# What is dependency injections
- Basically dependency injection is design pattern, which means injecting the dependencies into a class instead of creating beans
- We can use annotations like @Autowired, @Controller, @Service, @Repository and @Component annotations for dependency injection

# What is circular dependency in spring boot*

# What is CRUD repository & JPA repository*

# In spring boot application how to tune application performance
- To improve application performance I can use caching, I am trying to avoid no of database call frequently, i will save in cache level and retrieve data from cache
- I can configure actuator to monitor application health & performance and identify the where it was taking more time
- And try to use Asynchronous processing using @Asynch annotation

# How to divide monolithic to microservice application*
- 

# Different between synchronous and asynchronous communication in microservice*

# Write program to find list of words characters from sentence, and sorted alphabetical order using java 8
- public static void main(String[] args){
  String str = "Java is fun and Java is powerfull";
  List<String> uniqueWords = Arrays.Stream(str.split(" ")).map(String::toLowercase).distinct().sorted().collect(Collectors.toList());
  System.out.println(uniqueWords);
  }


---------- CGI ---------[https://www.youtube.com/watch?v=I8vcwnn6Qc8]
# We have two interface A & B, we have a same default method in both interface. And I am implements both interfaces to my class and try to use default method in my class. how it will work
- When a class implements multiple interfaces that each provide the same default method, Java will encounter an ambiguity because it cannot decide which default method to use. In such a case, you must explicitly override the method in the class to resolve the conflict.

# Why they introduced private in Java

# When we should go default method & when we should go static method

# What is variable argument in java

# In public static void main(String[] args), can we replace with variable argument in string[]

# We have class is Test, it have one static method list testing(), we are create object for this Test class with null reference. like Test obj = null; now if i call obj.testing(). So it work fine or get any issues

# What is equals & hash code contract

# Different between base class & abstract class

# What is marker interface in java
 
# Can we create our own custom market interface? If yes how?

# What volatile key word

# Can we are functional interface without abstract methods? If no why?

# We have TreeSet and we are added first elements in null and second elements is abc. so if we print that object what will display
- Will get run time exception, because we added null, null values not allowed error so it will run time

# What will happen if we return system.exit() in try catch block, finally block will execute or not?
- If you call System.exit() within a try-catch block, the finally block will not execute because System.exit() immediately terminates the entire Java Virtual Machine (JVM), preventing the   execution of any further code, including the finally block

# What are the different components of microservices
- We have different type of components in microservice like Service Discovery, API Gate Way, Load balancer, Service Registry, AOP, Circuit Breakers

# What are the different way to create spring boot applications
- We normal used spring boot initializer, we can select what are the dependencies for application and generate application and export application into IDE (like STS)
- Also we can generate Spring boot application from IDE it self(Like STS)
- Also we can generate spring boot application form CLI

# What is Spring boot actuator, and advantages?
- 

# What is spring boot profiles

# How to handle Spring Boot application exceptions globally

# Which build tool use normal like Maven/Gradle

# What is maven life cycle

# What is default scop is maven
- Default scop is compile

# What is maven plugin
- 

# What is cluster and non-cluster index in SQL

# What is view in SQL & How to defined from the table

# What is store procedures & how to defin3d from view
- Store procedures only queries, it like one or more SQL statements in database, and it can accept parameters and it perform operations based on parameters

----- TCS -------[https://www.youtube.com/watch?v=SoijryxeSrc]
# Can we have two method in same class
- Yes can create same method in same class. but should be have different or type of parameters

# Diff abstract class & interface

# We have super class, that class have method and that method return Null pointer exceptions in run time, from sub class if we over ride that method what will happen?

# Different between Comparable and Comparator Interface

# How do we use Comparable & Comparator Interface

# Different between equals() and == operator

# What is Big Integer & How to initialize Big Integer

# Why Java is not 100% object oriental

# If we use Java 8 how to avoid null pointer exceptions
- Using Optional class we can avoid null pointer exceptions

# What are the methods we have in Optional class

# What is functional interface

# Can you name some one functional interfaces

# What is clonable interface

# What is marker interface

# Diff throw, throws and throwable
- Throwable is super class of all errors and exceptions
- Throws is key word we can use this on method level
- Throw is used to throw the exception explicitly in try and catch block

# What we understand by lambda expressions

# We have list, in the list we have some string we have to find out the distinct names 

# We have employee table, find the who's have kumar as a midle name in SQL
- select * from employee where midle_name like %kumar%;

# What is foreign constraints

# Can we use HashMap in multithread environment

# Can we put duplicate elements in Array List

# What type of annotations we used for Rest API 
- @Controller, @RequestMapping, @RequestMethod, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @Service, @Repository

# How we are connecting database

# If we want to get some value from properties file which annotation will use
- @Value annotation - for field level
- @propertySource - for class level












